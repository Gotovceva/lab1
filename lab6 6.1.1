# Лабараторная работа № 6
# Уровень 1, задание 1
# Результатты соревнований по прыжкам в длину определяются по сумме двух попыток. В протоколе для каждого участника указываются: фамилия, общество, результаты первой и второй попыток. Вывести протокол в виде таблицы с заголовком в порядке занятых мест
class Jumper:
    def __init__(self, last_name, society, attempt1, attempt2):
        self.last_name = last_name
        self.society = society
        self.attempt1 = attempt1
        self.attempt2 = attempt2
        self.total = attempt1 + attempt2
    def __repr__(self):
        return f"{self.last_name} ({self.society}): {self.total}"
def bubble_sort(jumpers):
    n = len(jumpers)
    for i in range(n):
        for j in range(0, n - i - 1):
            if jumpers[j].total < jumpers[j + 1].total:
                jumpers[j], jumpers[j + 1] = jumpers[j + 1], jumpers[j]
def generate_results_table(jumpers):
    bubble_sort(jumpers)
    table = [["Место", "Фамилия", "Общество", "Попытка 1", "Попытка 2", "Сумма"]]
    for i, jumper in enumerate(jumpers):
        table.append([i + 1, jumper.last_name, jumper.society, jumper.attempt1, jumper.attempt2, jumper.total])
    for row in table:
        print("{:<10} {:<15} {:<15} {:<10} {:<10} {:<10}".format(*row))
jumpers_data = [
    ("Иванов", "Динамо", 5.2, 5.5),
    ("Петров", "Спартак", 5.0, 5.3),
    ("Сидоров", "Локомотив", 5.8, 5.7),
    ("Смирнов", "Зенит", 5.1, 5.4),
    ("Кузнецов", "ЦСКА", 5.6, 5.2),
]
jumpers = [Jumper(ln, soc, a1, a2) for ln, soc, a1, a2 in jumpers_data]
generate_results_table(jumpers)
